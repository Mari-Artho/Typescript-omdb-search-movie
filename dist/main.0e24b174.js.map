{"version":3,"sources":["ts/models/iService.ts","ts/main.ts"],"names":[],"mappings":"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","file":"main.0e24b174.js","sourceRoot":"../src","sourcesContent":["export interface iService {\n    getData(useData: (movieInfo: any) => void): void;\n    getMovieData(title: string, useData: (movieInfo: any) => void): void;\n}//The name of getData () can be anything. Same as naming the Variable as I like.\n\n\nexport class Service implements iService {\n    getData(useData: (movieInfo: any) => void): void { getOMDBData(useData); }\n    // parameter useData: function that shows how to use the data;\n    // the function itself takes one parameter (movieInfo) and returns void\n    getMovieData(title: string, useData: (movieInfo: any) => void): void { getMovieDataFromOMDB(title, useData); }\n    constructor() {}\n}\n\n// any means that you return either nothing (void) or anything,\n// void means that no value is returned.\nfunction getOMDBData(useData): void {\n    //Get data from API.\n    fetch(\"http://www.omdbapi.com/?i=tt3896198&apikey=453d560a\")\n      .then(response => response.json())\n      //⇩これがmap()関数だよー。\n      .then(movieInfo => useData(movieInfo))\n      .catch((error) => {\n        console.error('Error:', error);\n      }\n      );\n  }\n\n  function getMovieDataFromOMDB(title, useData): void {\n    //Get data from API.\n    fetch(\"http://www.omdbapi.com/?t=\" + encodeURIComponent(title) + \"&apikey=453d560a\")\n      .then(response => response.json())\n      //⇩これがmap()関数だよー。\n      .then(movieInfo => useData(movieInfo))\n      .catch((error) => {\n        console.error('Error:', error);\n      }\n      );\n  }","import { iService, Service } from \"./models/iService\";\n\n//たけさとがiPadを１人ずつ使いたいから、newを作るみたいな感じだよー。\nlet service: iService = new Service;\n\n//service.getData(logData);\n//service.getData(useData);\n\nfunction logData(movieInfo: { Title: string; Director: string; Year: string; Poster:string; }): void{\n  console.log(`Title: ${movieInfo.Title}, director: ${movieInfo.Director}, year: ${movieInfo.Year}, poster: ${movieInfo.Poster}`);\n}\n\nfunction useData(movieInfo: { Title: string; Director: string; Year: string;Poster:string }): void{\n  //show title\n  document.getElementById(\"title\").innerText = movieInfo.Title;\n  //show director's name\n  document.getElementById(\"director\").innerText = \"Director is \" +  movieInfo.Director;\n  //show movie's year\n  document.getElementById(\"year\").innerText = movieInfo.Year;\n  // //show poster image\n  // let imgElement = document.createElement(\"img\");\n   let showImg =  movieInfo.Poster;\n  // //var url = showImg.createObjectURL(images);\n  //  console.log(showImg);\n  // imgElement.src = showImg;\n  let imgPoster = document.getElementById(\"imgPoster\");\n  imgPoster.append = showImg\n}\n\n\n  //from project\n  // async function ReadAPI(url): Promise<any> {\n  //   let response = await fetch(url);\n  //   let data = await response.json();\n  //   return data;\n  // }\n\n  // async function readMovieAync(movieInfo) {\n  //   let imgUrl = movieInfo.Poster;\n  //   let m = await ReadAPI(imgUrl);\n\n  //   let poster = document.createElement(\"img\");\n  //   let showImg =  movieInfo.Poster;\n  //   poster.src=showImg;\n  //   const yearNode = document.getElementById(\"year\");\n  //   yearNode.appendChild(poster);\n}\n\n\n\nfunction search (): void{\n  let title = (<HTMLInputElement>document.getElementById(\"inputTitle\")).value;\n  service.getMovieData(title, useData);\n}\n\nlet clickBtn =  document.getElementById(\"searchBtn\").addEventListener(\"click\", search);"]}